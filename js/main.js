// Generated by CoffeeScript 1.6.2
(function() {
  var ASSETS, AimStraightMover, AimStraightShooter, BULLET_IMG, Bullet, Enemy, Material, Mover, PLAYER_IMG, Player, Shooter, ShotShooter, StraightMover, StraightShooter, add, enemies, enemy_bullets, game, intoWindow, isInWindow, normalize, player, player_bullets, players, puts, rand, remove, to_angle, to_angle_material, to_vec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  enchant();

  ASSETS = [PLAYER_IMG = 'player.png', BULLET_IMG = 'icon0.png'];

  game = null;

  player = null;

  players = null;

  enemies = null;

  player_bullets = null;

  enemy_bullets = null;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  puts = function() {
    var ret, v, _i, _len;

    ret = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      v = arguments[_i];
      console.log(v);
      ret.push(v);
    }
    if (ret.length === 1) {
      return ret[0];
    } else {
      return ret;
    }
  };

  rand = function(min, max) {
    var d;

    if (max == null) {
      max = min;
      min = 0;
    }
    min = Math.floor(min);
    max = Math.floor(max);
    d = max - min;
    if (d !== 0) {
      return min + Math.floor(Math.random() * d) % d;
    } else {
      return min;
    }
  };

  normalize = function(x, y) {
    var len;

    len = Math.sqrt(x * x + y * y);
    return [x / len, y / len];
  };

  to_angle = function(x, y) {
    var ret;

    ret = Math.atan2(y, x) + Math.PI / 2;
    if (!isNaN(ret)) {
      return ret;
    } else {
      if (y >= 0) {
        return Math.PI;
      } else {
        return 0;
      }
    }
  };

  to_angle_material = function(mat1, mat2) {
    return to_angle(mat2.rx - mat1.rx, mat2.ry - mat1.ry);
  };

  to_vec = function(angle) {
    return [Math.cos(angle - Math.PI / 2), Math.sin(angle - Math.PI / 2)];
  };

  add = function(node) {
    return game.currentScene.addChild(node);
  };

  remove = function(node) {
    return game.currentScene.removeChild(node);
  };

  isInWindow = function(material) {
    var _ref, _ref1;

    return (0 <= (_ref = material.rx) && _ref < game.width) && (0 <= (_ref1 = material.ry) && _ref1 < game.height);
  };

  intoWindow = function(material) {
    var t;

    if (material.rx < 0) {
      material.rx = 0;
    }
    t = game.width - 1;
    if (material.rx > t) {
      material.rx = t;
    }
    if (material.ry < 0) {
      material.ry = 0;
    }
    t = game.height - 1;
    if (material.ry > t) {
      return material.ry = t;
    }
  };

  Material = (function(_super) {
    __extends(Material, _super);

    function Material(img_name, frame, width, height, rradius, group) {
      this.rradius = rradius;
      this.group = group;
      Material.__super__.constructor.call(this, width, height);
      this.image = game.assets[img_name];
      this.frame = frame;
      this.group.addChild(this);
      this.hp = 1;
      this.power = 1;
      this.vx = 0;
      this.vy = 0;
    }

    Material.prototype.damage = function(material) {
      this.hp -= material.power;
      if (this.hp <= 0) {
        return this.hp = 0;
      }
    };

    Material.prototype.attack = function(material) {
      material.damage(this);
      return this.damage(material);
    };

    Material.property('rx', {
      get: function() {
        return this.x + this.width / 2;
      },
      set: function(x) {
        return this.x = x - this.width / 2;
      }
    });

    Material.property('ry', {
      get: function() {
        return this.y + this.height / 2;
      },
      set: function(y) {
        return this.y = y - this.height / 2;
      }
    });

    Material.prototype.ondying = function() {};

    Material.prototype.hit_check = function(material) {
      var dist, rdist;

      rdist = Math.pow(this.rx - material.rx, 2) + Math.pow(this.ry - material.ry, 2);
      dist = Math.pow(this.rradius + material.rradius, 2);
      return rdist <= dist;
    };

    Material.prototype.onenterframe = function() {
      this.rx += this.vx;
      return this.ry += this.vy;
    };

    Material.prototype.update_rotation = function() {
      return this.rotation = this.vx === 0 && this.vy === 0 ? 180 : to_angle(this.vx, this.vy) / Math.PI * 180;
    };

    return Material;

  })(Sprite);

  Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      Player.__super__.constructor.call(this, PLAYER_IMG, 27, 32, 32, 1, players);
      this.scale(2, 2);
      this.rx = game.width / 2;
      this.ry = game.height / 3 * 2;
      this.core = new Material(BULLET_IMG, 20, 16, 16, 0, game.currentScene);
      this.core.scale(this.rradius * 8 / this.core.width, this.rradius * 8 / this.core.height);
      this.core.rx = this.rx;
      this.core.ry = this.ry;
    }

    Player.prototype.onenterframe = function() {
      var i, _i, _results;

      Player.__super__.onenterframe.apply(this, arguments);
      this.core.rx = this.rx;
      this.core.ry = this.ry;
      if (game.frame % (game.fps / 10) === 0) {
        _results = [];
        for (i = _i = -2; _i <= 2; i = ++_i) {
          _results.push(new Bullet(48, this.rx + (this.width / 4) * i, this.ry - this.height / 2, 0, -10, player_bullets));
        }
        return _results;
      }
    };

    Player.prototype.ondying = function() {
      return remove(this.core);
    };

    return Player;

  })(Material);

  Enemy = (function(_super) {
    __extends(Enemy, _super);

    function Enemy(x, y) {
      Enemy.__super__.constructor.call(this, PLAYER_IMG, 0, 32, 32, 16, enemies);
      this.scale(2, -2);
      this.rx = x;
      this.ry = y;
      this.hp = 10;
      this.mover = new Mover;
      this.shooter = new Shooter;
    }

    Enemy.prototype.onenterframe = function() {
      Enemy.__super__.onenterframe.apply(this, arguments);
      this.update_rotation();
      if (game.frame % (game.fps / 5) === 0) {
        this.shooter["do"]();
      }
      return this.mover["do"]();
    };

    return Enemy;

  })(Material);

  Mover = (function() {
    function Mover() {}

    Mover.prototype["do"] = function() {};

    return Mover;

  })();

  StraightMover = (function(_super) {
    __extends(StraightMover, _super);

    function StraightMover(parent, vx, vy) {
      this.parent = parent;
      this.parent.vx = vx;
      this.parent.vy = vy;
    }

    StraightMover.prototype["do"] = function() {
      if (!isInWindow(this)) {
        return this.hp = 0;
      }
    };

    return StraightMover;

  })(Mover);

  AimStraightMover = (function(_super) {
    __extends(AimStraightMover, _super);

    function AimStraightMover(parent, v, fixed) {
      this.parent = parent;
      this.v = v;
      this.fixed = fixed;
      if (this.fixed) {
        this.set_velocity();
      }
    }

    AimStraightMover.prototype["do"] = function() {
      if (!this.fixed) {
        return this.set_velocity();
      }
    };

    AimStraightMover.prototype.set_velocity = function() {
      var _ref;

      return _ref = normalize(player.rx - this.parent.rx, player.ry - this.parent.ry).map((function(v) {
        return v * this.v;
      }), this), this.parent.vx = _ref[0], this.parent.vy = _ref[1], _ref;
    };

    return AimStraightMover;

  })(Mover);

  Shooter = (function() {
    function Shooter() {
      this.level = 0;
    }

    Shooter.prototype["do"] = function() {};

    return Shooter;

  })();

  StraightShooter = (function(_super) {
    __extends(StraightShooter, _super);

    function StraightShooter(parent, way, space, vx, vy) {
      this.parent = parent;
      this.way = way;
      this.space = space;
      this.vx = vx;
      this.vy = vy;
    }

    StraightShooter.prototype["do"] = function() {
      var angle, i, vx, vy, _i, _ref, _ref1, _results;

      angle = to_angle(this.xv, this.vy) + (this.way % 2 === 0 ? this.space / 2 : this.space) * Math.floor(this.way / 2);
      _results = [];
      for (i = _i = 1, _ref = this.way; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _ref1 = to_vec(angle).map(function(e) {
          return e * 6;
        }), vx = _ref1[0], vy = _ref1[1];
        new Bullet(56, this.parent.rx, this.parent.ry, vx, vy, enemy_bullets);
        _results.push(angle -= this.space);
      }
      return _results;
    };

    return StraightShooter;

  })(Shooter);

  AimStraightShooter = (function(_super) {
    __extends(AimStraightShooter, _super);

    function AimStraightShooter(parent, way, space, fixed) {
      this.parent = parent;
      this.way = way;
      this.space = space;
      this.fixed = fixed;
      this.px = player.rx;
      this.py = player.ry;
      if (this.fixed) {
        this.fixed_angle = make_init_angle();
      }
    }

    AimStraightShooter.prototype["do"] = function() {
      var angle, i, vx, vy, _i, _ref, _ref1, _results;

      if (!this.fixed) {
        angle = make_init_angle();
      }
      _results = [];
      for (i = _i = 1, _ref = this.way; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _ref1 = to_vec(angle).map(function(e) {
          return e * 6;
        }), vx = _ref1[0], vy = _ref1[1];
        new Bullet(56, this.parent.rx, this.parent.ry, vx, vy, enemy_bullets);
        _results.push(angle -= this.space);
      }
      return _results;
    };

    AimStraightShooter.prototype.make_init_angle = function() {
      return to_angle(this.px - this.parent.rx, this.py - this.parent.ry) + (this.way % 2 === 0 ? this.space / 2 : this.space) * Math.floor(this.way / 2);
    };

    return AimStraightShooter;

  })(Shooter);

  ShotShooter = (function(_super) {
    __extends(ShotShooter, _super);

    function ShotShooter(parent, space) {
      this.parent = parent;
      this.space = space;
    }

    ShotShooter.prototype["do"] = function() {
      var angle, i, vx, vy, _i, _ref, _ref1, _results;

      angle = 0;
      _results = [];
      for (i = _i = 1, _ref = Math.PI * 2 / this.space; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _ref1 = to_vec(angle).map(function(e) {
          return e * 2;
        }), vx = _ref1[0], vy = _ref1[1];
        new Bullet(56, this.parent.rx, this.parent.ry, vx, vy, enemy_bullets);
        _results.push(angle -= this.space * Math.random() * 2);
      }
      return _results;
    };

    return ShotShooter;

  })(Shooter);

  Bullet = (function(_super) {
    __extends(Bullet, _super);

    function Bullet(frame, x, y, vx, vy, group) {
      Bullet.__super__.constructor.call(this, BULLET_IMG, frame, 16, 16, 1, group);
      this.rx = x;
      this.ry = y;
      this.vx = vx;
      this.vy = vy;
    }

    Bullet.prototype.onenterframe = function() {
      Bullet.__super__.onenterframe.apply(this, arguments);
      this.update_rotation();
      if (!isInWindow(this)) {
        return this.hp = 0;
      }
    };

    return Bullet;

  })(Material);

  window.onload = function() {
    game = new Game(400, 600);
    game.fps = 60;
    game.preload(ASSETS);
    game.onload = function() {
      var bex, bey, e, scene;

      scene = game.rootScene;
      scene.backgroundColor = '#ffffff';
      players = new Group;
      add(players);
      enemies = new Group;
      add(enemies);
      player_bullets = new Group;
      add(player_bullets);
      enemy_bullets = new Group;
      add(enemy_bullets);
      player = new Player;
      e = new Enemy(game.width / 3, game.height / 3);
      e.shooter = new ShotShooter(e, Math.PI / 30);
      e.mover = new StraightMover(e, 0, -2);
      scene.onenterframe = function() {
        var first, group, group_set, group_sets, h, i, m, p, positions, second, v, w, x, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;

        _ref = [players, enemies, player_bullets, enemy_bullets];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          _ref1 = group.childNodes;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            m = _ref1[_j];
            if ((m != null ? m.hp : void 0) <= 0) {
              m.ondying();
              m.group.removeChild(m);
            }
            if ((m != null) && m instanceof Enemy) {
              m.ry += 2;
            }
          }
        }
        group_sets = [[player_bullets, enemies], [enemy_bullets, players], [enemies, players]];
        for (_k = 0, _len2 = group_sets.length; _k < _len2; _k++) {
          group_set = group_sets[_k];
          _ref2 = group_set[0].childNodes;
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            first = _ref2[_l];
            _ref3 = group_set[1].childNodes;
            for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
              second = _ref3[_m];
              if (first.hit_check(second)) {
                first.attack(second);
              }
            }
          }
        }
        w = game.width;
        h = game.height;
        positions = __slice.call((function() {
            var _n, _results;

            _results = [];
            for (x = _n = 0; _n <= 5; x = ++_n) {
              _results.push([x * w / 5, 0]);
            }
            return _results;
          })()).concat([[0, h / 4]], [[w, h / 4]]);
        if (game.frame % (game.fps * rand(1, 3)) === 0) {
          for (i = _n = 0, _ref4 = rand(1, 2); 0 <= _ref4 ? _n <= _ref4 : _n >= _ref4; i = 0 <= _ref4 ? ++_n : --_n) {
            p = positions[rand(0, positions.length)];
            e = new Enemy(p[0], p[1]);
            e.shooter = new ShotShooter(e, Math.PI);
          }
        }
        v = 2;
        if (game.input.up) {
          player.ry -= v;
        }
        if (game.input.down) {
          player.ry += v;
        }
        if (game.input.left) {
          player.rx -= v;
        }
        if (game.input.right) {
          player.rx += v;
        }
        return intoWindow(player);
      };
      bex = bey = 0;
      scene.ontouchstart = function(e) {
        bex = e.x;
        return bey = e.y;
      };
      return scene.ontouchmove = function(e) {
        player.rx += e.x - bex;
        player.ry += e.y - bey;
        bex = e.x;
        return bey = e.y;
      };
    };
    return game.start();
  };

}).call(this);
